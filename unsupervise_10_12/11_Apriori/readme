使用Apriori算法进行关联分析（association analysis）或关联规则学习（association rule learning）:
从大规模数据集中寻找物品间的隐含关系，需要用更智能的方法在合理的时间内找到频繁项集。


Apriori算法：
优点：易编码实现
缺点：在大数据集上可能较慢
适用数据类型：数值型或标称型数据


关联分析是在一种大规模数据集中寻找有趣关系的任务。关系可以有两种形式：频繁项集或者关联规则。
频繁项集（frequent item sets）是经常出现在一起的物品集合
关联规则（association rules）暗示两种物品之间可能存在很强的关系。


频繁项集：一个项集
支持度（support）：数据集中包含该项集的记录所占的比例。可以定义一个最小支持度，只保留满足最小支持度的项集
关联规则：
可信度或置信度（confidence）：是针对一条诸如{尿布}->{葡萄酒}的关联规则来定义的，这条规则的可信度被定义为“支持度（{尿布，葡萄酒}）/支持度（{尿布}）”


支持度和可信度是用来量化关联分析是否成功的方法

Apriori算法一般流程
（1）收集数据：任意方法
（2）准备数据：任何数据类型都可以，因为我们只保存集合
（3）分析数据：任意方法
（4）训练算法：使用Apriori算法找到频繁项集
（5）测试算法：无
（6）使用算法：用于发现频繁项集及物品之间的关联规则

Apriori原理是如果某个项集是频繁的，那么它的所有子集也是频繁的；如果一个项集是非频繁集，那么它的所有超集也是非频繁。

Apriori算法的两个输入参数是最小支持度和数据集：
该算法首先生成所有单个物品的项集列表，接着扫描交易来查看哪些项集满足最小支持度要求，那些不满足支持度的集合被去掉；
然后对剩下的集合进行组合以生成包含两个元素的项集，接下来重新扫描交易记录，去掉不满足最小支持度的项集，
重复以上过程知道所有项集都被去掉。


一条规则P->H的可信度定义为support（P|H)/support(P)
在python中|表示并操作


在美国国会投票记录中发现关联规则：
（1）收集数据：使用votesmart模块来访问投票记录
（2）准备数据：构造一个函数将投票转化为一串交易记录
（3）分析数据：在python提示符下查看准备的数据以确保其正确性
（4）训练算法：使用前面的apriori（）和generateRules（）函数来发现投票中的有趣信息
（5）测试算法：无
（6）使用算法：预测选举官员会如何得票
