FP-growth算法：更高效的发现频繁项集。（不能用于发现关联规则）

FP-growth算法只需对数据库扫描两次，而Apriori算法对于每个潜在的频繁项集都会扫描数据集判定给定模式是否频繁，因此FP-growth算法比Apriori算法快。

FP-growth算法发现频繁项集的基本过程如下：
（1）构建FP树
（2）从FP树中挖掘频繁项集


FP树用于编码数据集的有效方式：

FP-growth算法：
优点：快于Apriori算法
缺点：实现比较困难，在某些数据集上性能会下降
适用数据类型：标称型数据


FP-growth算法将数据存储在一种称为FP树的紧凑数据结构中，FP代表频繁模式（Frequent Pattern）
FP树通过链接（link）来连接相似元素，被连起来的元素可以看成一个链表。
 同搜索树不同的是，一个元素项可以在一颗FP树中出现多次，FP树存储项集的出现频率，而每个项集会以路径的方式存储在树中，
 存在相似元素的集合会共享树的一部分，只有当集合之间完全不同时，树才会分叉。树节点上给出集合中的单个元素及其在序列中的出现次数，路径会给出该序列的出现次数。
 相似项之间的链接即节点链接（node link），用于快速发现相似项的位置。


 FP-growth算法工作流程如下：首先构建FP树，然后利用它来挖掘频繁项集，为构建FP树，需要对原始数据集扫描两遍。第一遍对所有元素项的出现次数进行计数，
 第二遍扫描只考虑那些频繁元素。（如果某元素是不频繁的，那么包含该元素的超集也是不频繁的）

 FP-growth一般流程：
 （1）收集数据：任意方法
 （2）准备数据：由于存储的是集合，所以需要离散数据，如果要处理连续数据需将他们量化为离散值
 （3）分析数据：任意方法
 （4）训练算法：构建一个FP树，并进行树挖掘
 （5）测试算法：无
 （6）使用算法：可以用于识别经常出现的元素项，从而用于制定决策、推荐元素或进行预测等应用中。



 从FP树中抽取频繁项集的三个基本步骤：
 （1）从FP树中获得条件模式基
 （2）利用条件模式基，构建一个条件FP树
 （3）迭代重复步骤（1）（2），直到树包含一个元素项为止。

 conditional pattern base
 条件模式基是以所查找元素项为结尾的路径集合。每一条路径都是一条前缀路径，一条前缀路径就是介于所查找元素项与树根节点之间的所有内容。